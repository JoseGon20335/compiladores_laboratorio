# Generated from antlr_build/grammarYapl.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,398,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,3,3,125,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,135,8,
        4,1,5,1,5,1,5,1,5,3,5,141,8,5,1,6,1,6,1,6,1,6,3,6,147,8,6,1,7,1,
        7,1,7,1,7,3,7,153,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,3,8,171,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,3,9,185,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,3,10,195,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,
        205,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,215,8,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,227,8,13,1,
        14,1,14,1,14,1,14,1,14,1,14,3,14,235,8,14,1,15,1,15,1,15,1,15,1,
        15,1,15,3,15,243,8,15,1,16,1,16,1,16,1,16,1,17,1,17,5,17,251,8,17,
        10,17,12,17,254,9,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,265,8,17,1,18,1,18,5,18,269,8,18,10,18,12,18,272,9,18,1,19,
        4,19,275,8,19,11,19,12,19,276,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,3,20,288,8,20,1,21,1,21,1,21,1,21,5,21,294,8,21,10,21,
        12,21,297,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,4,23,306,8,23,
        11,23,12,23,307,1,23,1,23,1,24,1,24,1,24,1,24,5,24,316,8,24,10,24,
        12,24,319,9,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,329,
        8,25,10,25,12,25,332,9,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,
        1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,
        1,50,1,50,1,51,1,51,1,51,2,317,330,0,52,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,1,0,7,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,97,122,
        1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,12,13,32,32,2,0,10,10,13,
        13,420,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
        0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
        0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,107,1,0,0,0,5,109,
        1,0,0,0,7,124,1,0,0,0,9,134,1,0,0,0,11,140,1,0,0,0,13,146,1,0,0,
        0,15,152,1,0,0,0,17,170,1,0,0,0,19,184,1,0,0,0,21,194,1,0,0,0,23,
        204,1,0,0,0,25,214,1,0,0,0,27,226,1,0,0,0,29,234,1,0,0,0,31,242,
        1,0,0,0,33,244,1,0,0,0,35,264,1,0,0,0,37,266,1,0,0,0,39,274,1,0,
        0,0,41,287,1,0,0,0,43,289,1,0,0,0,45,300,1,0,0,0,47,305,1,0,0,0,
        49,311,1,0,0,0,51,324,1,0,0,0,53,338,1,0,0,0,55,340,1,0,0,0,57,342,
        1,0,0,0,59,344,1,0,0,0,61,346,1,0,0,0,63,348,1,0,0,0,65,350,1,0,
        0,0,67,352,1,0,0,0,69,354,1,0,0,0,71,356,1,0,0,0,73,358,1,0,0,0,
        75,360,1,0,0,0,77,362,1,0,0,0,79,364,1,0,0,0,81,366,1,0,0,0,83,368,
        1,0,0,0,85,370,1,0,0,0,87,373,1,0,0,0,89,375,1,0,0,0,91,377,1,0,
        0,0,93,380,1,0,0,0,95,383,1,0,0,0,97,386,1,0,0,0,99,389,1,0,0,0,
        101,392,1,0,0,0,103,395,1,0,0,0,105,106,5,38,0,0,106,2,1,0,0,0,107,
        108,5,124,0,0,108,4,1,0,0,0,109,110,5,115,0,0,110,111,5,101,0,0,
        111,112,5,108,0,0,112,113,5,102,0,0,113,6,1,0,0,0,114,115,5,99,0,
        0,115,116,5,108,0,0,116,117,5,97,0,0,117,118,5,115,0,0,118,125,5,
        115,0,0,119,120,5,67,0,0,120,121,5,76,0,0,121,122,5,65,0,0,122,123,
        5,83,0,0,123,125,5,83,0,0,124,114,1,0,0,0,124,119,1,0,0,0,125,8,
        1,0,0,0,126,127,5,101,0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,
        135,5,101,0,0,130,131,5,69,0,0,131,132,5,76,0,0,132,133,5,83,0,0,
        133,135,5,69,0,0,134,126,1,0,0,0,134,130,1,0,0,0,135,10,1,0,0,0,
        136,137,5,102,0,0,137,141,5,105,0,0,138,139,5,70,0,0,139,141,5,73,
        0,0,140,136,1,0,0,0,140,138,1,0,0,0,141,12,1,0,0,0,142,143,5,105,
        0,0,143,147,5,102,0,0,144,145,5,73,0,0,145,147,5,70,0,0,146,142,
        1,0,0,0,146,144,1,0,0,0,147,14,1,0,0,0,148,149,5,105,0,0,149,153,
        5,110,0,0,150,151,5,73,0,0,151,153,5,78,0,0,152,148,1,0,0,0,152,
        150,1,0,0,0,153,16,1,0,0,0,154,155,5,105,0,0,155,156,5,110,0,0,156,
        157,5,104,0,0,157,158,5,101,0,0,158,159,5,114,0,0,159,160,5,105,
        0,0,160,161,5,116,0,0,161,171,5,115,0,0,162,163,5,73,0,0,163,164,
        5,78,0,0,164,165,5,72,0,0,165,166,5,69,0,0,166,167,5,82,0,0,167,
        168,5,73,0,0,168,169,5,84,0,0,169,171,5,83,0,0,170,154,1,0,0,0,170,
        162,1,0,0,0,171,18,1,0,0,0,172,173,5,105,0,0,173,174,5,115,0,0,174,
        175,5,118,0,0,175,176,5,111,0,0,176,177,5,105,0,0,177,185,5,100,
        0,0,178,179,5,73,0,0,179,180,5,83,0,0,180,181,5,86,0,0,181,182,5,
        79,0,0,182,183,5,73,0,0,183,185,5,68,0,0,184,172,1,0,0,0,184,178,
        1,0,0,0,185,20,1,0,0,0,186,187,5,108,0,0,187,188,5,111,0,0,188,189,
        5,111,0,0,189,195,5,112,0,0,190,191,5,76,0,0,191,192,5,79,0,0,192,
        193,5,79,0,0,193,195,5,80,0,0,194,186,1,0,0,0,194,190,1,0,0,0,195,
        22,1,0,0,0,196,197,5,112,0,0,197,198,5,111,0,0,198,199,5,111,0,0,
        199,205,5,108,0,0,200,201,5,80,0,0,201,202,5,79,0,0,202,203,5,79,
        0,0,203,205,5,76,0,0,204,196,1,0,0,0,204,200,1,0,0,0,205,24,1,0,
        0,0,206,207,5,116,0,0,207,208,5,104,0,0,208,209,5,101,0,0,209,215,
        5,110,0,0,210,211,5,84,0,0,211,212,5,72,0,0,212,213,5,69,0,0,213,
        215,5,78,0,0,214,206,1,0,0,0,214,210,1,0,0,0,215,26,1,0,0,0,216,
        217,5,119,0,0,217,218,5,104,0,0,218,219,5,105,0,0,219,220,5,108,
        0,0,220,227,5,101,0,0,221,222,5,87,0,0,222,223,5,72,0,0,223,224,
        5,73,0,0,224,225,5,76,0,0,225,227,5,69,0,0,226,216,1,0,0,0,226,221,
        1,0,0,0,227,28,1,0,0,0,228,229,5,110,0,0,229,230,5,101,0,0,230,235,
        5,119,0,0,231,232,5,78,0,0,232,233,5,69,0,0,233,235,5,87,0,0,234,
        228,1,0,0,0,234,231,1,0,0,0,235,30,1,0,0,0,236,237,5,110,0,0,237,
        238,5,111,0,0,238,243,5,116,0,0,239,240,5,78,0,0,240,241,5,79,0,
        0,241,243,5,84,0,0,242,236,1,0,0,0,242,239,1,0,0,0,243,32,1,0,0,
        0,244,245,5,108,0,0,245,246,5,101,0,0,246,247,5,116,0,0,247,34,1,
        0,0,0,248,252,7,0,0,0,249,251,7,1,0,0,250,249,1,0,0,0,251,254,1,
        0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,265,1,0,0,0,254,252,1,
        0,0,0,255,256,5,83,0,0,256,257,5,69,0,0,257,258,5,76,0,0,258,259,
        5,70,0,0,259,260,5,95,0,0,260,261,5,84,0,0,261,262,5,89,0,0,262,
        263,5,80,0,0,263,265,5,69,0,0,264,248,1,0,0,0,264,255,1,0,0,0,265,
        36,1,0,0,0,266,270,7,2,0,0,267,269,7,1,0,0,268,267,1,0,0,0,269,272,
        1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,38,1,0,0,0,272,270,1,
        0,0,0,273,275,7,3,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,
        0,0,0,276,277,1,0,0,0,277,40,1,0,0,0,278,279,5,116,0,0,279,280,5,
        114,0,0,280,281,5,117,0,0,281,288,5,101,0,0,282,283,5,102,0,0,283,
        284,5,97,0,0,284,285,5,108,0,0,285,286,5,115,0,0,286,288,5,101,0,
        0,287,278,1,0,0,0,287,282,1,0,0,0,288,42,1,0,0,0,289,295,5,34,0,
        0,290,294,8,4,0,0,291,292,5,92,0,0,292,294,9,0,0,0,293,290,1,0,0,
        0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,
        0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,5,34,0,0,299,44,1,0,0,
        0,300,301,7,5,0,0,301,302,1,0,0,0,302,303,6,22,0,0,303,46,1,0,0,
        0,304,306,7,6,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,
        0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,6,23,0,0,310,48,1,0,0,
        0,311,312,5,45,0,0,312,313,5,45,0,0,313,317,1,0,0,0,314,316,9,0,
        0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,318,1,0,0,0,317,315,1,0,
        0,0,318,320,1,0,0,0,319,317,1,0,0,0,320,321,3,47,23,0,321,322,1,
        0,0,0,322,323,6,24,0,0,323,50,1,0,0,0,324,325,5,40,0,0,325,326,5,
        42,0,0,326,330,1,0,0,0,327,329,9,0,0,0,328,327,1,0,0,0,329,332,1,
        0,0,0,330,331,1,0,0,0,330,328,1,0,0,0,331,333,1,0,0,0,332,330,1,
        0,0,0,333,334,5,42,0,0,334,335,5,41,0,0,335,336,1,0,0,0,336,337,
        6,25,0,0,337,52,1,0,0,0,338,339,5,40,0,0,339,54,1,0,0,0,340,341,
        5,41,0,0,341,56,1,0,0,0,342,343,5,123,0,0,343,58,1,0,0,0,344,345,
        5,125,0,0,345,60,1,0,0,0,346,347,5,91,0,0,347,62,1,0,0,0,348,349,
        5,93,0,0,349,64,1,0,0,0,350,351,5,58,0,0,351,66,1,0,0,0,352,353,
        5,59,0,0,353,68,1,0,0,0,354,355,5,44,0,0,355,70,1,0,0,0,356,357,
        5,46,0,0,357,72,1,0,0,0,358,359,5,126,0,0,359,74,1,0,0,0,360,361,
        5,64,0,0,361,76,1,0,0,0,362,363,5,42,0,0,363,78,1,0,0,0,364,365,
        5,47,0,0,365,80,1,0,0,0,366,367,5,43,0,0,367,82,1,0,0,0,368,369,
        5,45,0,0,369,84,1,0,0,0,370,371,5,60,0,0,371,372,5,61,0,0,372,86,
        1,0,0,0,373,374,5,60,0,0,374,88,1,0,0,0,375,376,5,61,0,0,376,90,
        1,0,0,0,377,378,5,43,0,0,378,379,5,43,0,0,379,92,1,0,0,0,380,381,
        5,45,0,0,381,382,5,45,0,0,382,94,1,0,0,0,383,384,5,61,0,0,384,385,
        5,42,0,0,385,96,1,0,0,0,386,387,5,61,0,0,387,388,5,47,0,0,388,98,
        1,0,0,0,389,390,5,61,0,0,390,391,5,43,0,0,391,100,1,0,0,0,392,393,
        5,61,0,0,393,394,5,45,0,0,394,102,1,0,0,0,395,396,5,60,0,0,396,397,
        5,45,0,0,397,104,1,0,0,0,24,0,124,134,140,146,152,170,184,194,204,
        214,226,234,242,252,264,270,276,287,293,295,307,317,330,1,6,0,0
    ]

class grammarYaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    CLASS = 4
    ELSE = 5
    FI = 6
    IF = 7
    IN = 8
    INHERITS = 9
    ISVOID = 10
    LOOP = 11
    POOL = 12
    THEN = 13
    WHILE = 14
    NEW = 15
    NOT = 16
    LET = 17
    TYPE_ID = 18
    OBJECT_ID = 19
    INTEGER = 20
    BOOL = 21
    STRING = 22
    WHITESPACE = 23
    NEWLINE = 24
    COMMENT = 25
    COMMENT_BLOCK = 26
    LPAREN = 27
    RPAREN = 28
    LBRACE = 29
    RBRACE = 30
    LBRACKET = 31
    RBRACKET = 32
    COLON = 33
    SEMICOLON = 34
    COMMA = 35
    DOT = 36
    NEG = 37
    AT = 38
    MULT = 39
    DIV = 40
    PLUS = 41
    MINUS = 42
    LE = 43
    LT = 44
    EQ = 45
    INCR = 46
    DECR = 47
    ASSIGN_MULT = 48
    ASSIGN_DIV = 49
    ASSIGN_PLUS = 50
    ASSIGN_MINUS = 51
    ASSIGN = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&'", "'|'", "'self'", "'let'", "'('", "')'", "'{'", "'}'", 
            "'['", "']'", "':'", "';'", "','", "'.'", "'~'", "'@'", "'*'", 
            "'/'", "'+'", "'-'", "'<='", "'<'", "'='", "'++'", "'--'", "'=*'", 
            "'=/'", "'=+'", "'=-'", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", "TYPE_ID", "OBJECT_ID", 
            "INTEGER", "BOOL", "STRING", "WHITESPACE", "NEWLINE", "COMMENT", 
            "COMMENT_BLOCK", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
            "RBRACKET", "COLON", "SEMICOLON", "COMMA", "DOT", "NEG", "AT", 
            "MULT", "DIV", "PLUS", "MINUS", "LE", "LT", "EQ", "INCR", "DECR", 
            "ASSIGN_MULT", "ASSIGN_DIV", "ASSIGN_PLUS", "ASSIGN_MINUS", 
            "ASSIGN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "CLASS", "ELSE", "FI", "IF", "IN", 
                  "INHERITS", "ISVOID", "LOOP", "POOL", "THEN", "WHILE", 
                  "NEW", "NOT", "LET", "TYPE_ID", "OBJECT_ID", "INTEGER", 
                  "BOOL", "STRING", "WHITESPACE", "NEWLINE", "COMMENT", 
                  "COMMENT_BLOCK", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "LBRACKET", "RBRACKET", "COLON", "SEMICOLON", "COMMA", 
                  "DOT", "NEG", "AT", "MULT", "DIV", "PLUS", "MINUS", "LE", 
                  "LT", "EQ", "INCR", "DECR", "ASSIGN_MULT", "ASSIGN_DIV", 
                  "ASSIGN_PLUS", "ASSIGN_MINUS", "ASSIGN" ]

    grammarFileName = "grammarYapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


